// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // Address[14] will be 1 for all addresses >= 16384, i.e. for any device address it will be 1
    // Thus, we can use address[14] to see if we need to load devices or ram
    DMux(in=load, sel=address[14], a=loadRam, b=loadDevices);
    // For a device address, address[13] will only be 1 for keyboard, all Screen addresses have this
    // bit set to 0. Thus, we can use address[13] to determine whether to load screen or keyboard
    DMux(in=loadDevices, sel=address[13], a=loadScreen, b=loadKeyboard);
    // RAM16K has address bus width of 14, so we feed least significant 14 bits of address to it
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    // We offset screen address by 16383 not including two most significant bits from address
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);
    // Combine the output based on selector bits used in DMux, i.e. revert DMux back to output
    Mux16(a=screenOut, b=keyboardOut, sel=address[13], out=deviceOut);
    Mux16(a=ramOut, b=deviceOut, sel=address[14], out=out);
}